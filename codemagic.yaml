workflows:
  react-native:
    name: DynaFood App
    environment:
      node: latest
      groups:
        - jira_credentials
        - others
      vars:
        JIRA_AUTH: nikschef01@gmail.com:xWNum46TO4ak4pjfPLE83D9C
        JIRA_BASE_URL: eipdynafood.atlassian.net
        JIRA_ISSUE: DYN-1
        JIRA_TRANSITION_ID: 711
    scripts:
      - name: Build and run tests
        script: |
         npm install -g expo-cli
         npm install --legacy-peer-deps
         npm test
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: setup-codemagic
          include: true
          source: true
        - pattern: test
          include: true
          source: true
    publishing:
      scripts:
        - name: Post to JIRA
          script: |
            #!/bin/sh
            set -e
            set -x
            ARTIFACT_TYPE=".ipa" 
            
            # Get URL, Name, Bundle Id and Version name from $FCI_ARTIFACT_LINKS
            ARTIFACT_URL=$(echo $FCI_ARTIFACT_LINKS | jq -r '.[] | select(.name | endswith("'"$ARTIFACT_TYPE"'")) | .url')
            ARTIFACT_NAME=$(echo $FCI_ARTIFACT_LINKS | jq -r '.[] | select(.name | endswith("'"$ARTIFACT_TYPE"'")) | .name')
            TYPE=$(echo $FCI_ARTIFACT_LINKS | jq -r '.[] | select(.name | endswith("'"$ARTIFACT_TYPE"'")) | .type')
            BUNDLE=$(echo $FCI_ARTIFACT_LINKS | jq -r '.[] | select(.name | endswith("'"$ARTIFACT_TYPE"'")) | .bundleId')
            VERSION_NAME=$(echo $FCI_ARTIFACT_LINKS | jq -r '.[] | select(.name | endswith("'"$ARTIFACT_TYPE"'")) | .versionName')
            
            JIRA_AUTH=$(echo -n nikschef01@gmail.com:xWNum46TO4ak4pjfPLE83D9C | openssl base64)
            
            BUILD_VERSION=$(( ${BUILD_NUMBER} + 1 ))
            
            # Set the build date
            BUILD_DATE=$(date +"%Y-%m-%d")
            
            # Escape forward slash characters in URL to prevent errors when using sed to replace the template value
            TEST_URL=$(echo "${IPA_URL}" | sed 's#/#\\/#g')
            
            # Get first 7 digits of commit number
            COMMIT=$(echo "${FCI_COMMIT}" | sed 's/^\(........\).*/\1/;q')
            
            # Get the name of the test .xml file so we can attach it to a Jira issue
            #if [ $ARTIFACT_TYPE == ".ipa" ]
            #then
            #  XML_TEST_RESULTS=$(find -f build/ios/test/*.xml)
            #else
            #  XML_TEST_RESULTS=$(find -f app/build/test-results/**/*.xml)
            #fi  
            # Get the Git commit message for this build
            GIT_COMMIT_MESSAGE=$(git log --format=%B -n 1 $FCI_COMMIT)
            
            # Populate the values in the .json template which will be used as the JSON payload that will be set as a comment in Jira. 
            # See https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/ for details on how to structure comments using Atlassion Document Format.
            
            sed -i.bak "s/\$BUILD_DATE/$BUILD_DATE/" .templates/jira.json
            sed -i.bak "s/\$ARTIFACT_NAME/$ARTIFACT_NAME/" .templates/jira.json
            sed -i.bak "s/\$ARTIFACT_URL/$TEST_URL/" .templates/jira.json
            sed -i.bak "s/\$FCI_COMMIT/$COMMIT/" .templates/jira.json
            sed -i.bak "s/\$GIT_COMMIT_MESSAGE/$GIT_COMMIT_MESSAGE/" .templates/jira.json
            sed -i.bak "s/\$VERSION_NAME/$VERSION_NAME/" .templates/jira.json
            sed -i.bak "s/\$BUILD_VERSION/$BUILD_VERSION/" .templates/jira.json
            sed -i.bak "s/\$BUNDLE/$BUNDLE/" .templates/jira.json
            sed -i.bak "s/\$TYPE/$TYPE/" .templates/jira.json
            # Add a comment to Jira 
            # See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-comments/#api-rest-api-3-comment-list-post for details
            curl -X POST https://$JIRA_BASE_URL/rest/api/3/issue/$JIRA_ISSUE/comment -H "Authorization: Basic $JIRA_AUTH" -H "X-Atlassian-Token: nocheck" -H "Content-Type: application/json" --data @.templates/jira.json | jq "."
            
            # Transition Jira issue to another status 
            # See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-issueidorkey-transitions-post for details
            curl -X POST https://$JIRA_BASE_URL/rest/api/3/issue/$JIRA_ISSUE/transitions -H "Authorization: Basic $JIRA_AUTH" -H "X-Atlassian-Token: nocheck" -H "Content-Type: application/json" --data '{"transition":{"id":"'"$JIRA_TRANSITION_ID"'"}}' | jq "."
            
            # Attach XML test results to the Jira issue 
            # See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-attachments/#api-rest-api-3-issue-issueidorkey-attachments-post for details
            
            if [[ -z ${XML_TEST_RESULTS} ]]
            then
              echo "No test results available to upload to JIRA"
            else  
              curl -X POST https://$JIRA_BASE_URL/rest/api/3/issue/$JIRA_ISSUE/attachments -H "Authorization: Basic $JIRA_AUTH" -H "X-Atlassian-Token: nocheck" -F "file=@$XML_TEST_RESULTS"  | jq "."
            fi
            # Attach Release Notes to the Jira issue 
            # See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-attachments/#api-rest-api-3-issue-issueidorkey-attachments-post for details
            
            if [[ -e release_notes.txt ]]
            then 
              curl -X POST https://$JIRA_BASE_URL/rest/api/3/issue/$JIRA_ISSUE/attachments -H "Authorization: Basic $JIRA_AUTH" -H "X-Atlassian-Token: nocheck" -F "file=@release_notes.txt"  | jq "."
            else
              "No release_notes.txt available to upload to JIRA"
            fi